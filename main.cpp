#include <iostream>
#include "Graph.h"
#include "reads.h"
#include <chrono>

using namespace std;

int main() {
    auto start = chrono::steady_clock::now();
    Graph graph = Graph();
    readStations(&graph, "dataset/stations.csv");
    readNetwork(&graph, "dataset/network.csv");
    //double maxFlow = graph.edmondsKarp("Porto Campanhã", "Estarreja");//2.1
    //cout << "Máximo número de comboios simultâneos: " << maxFlow << "\n";
    graph.pairs();
    //graph.sinks();

    //graph.printTopK("municipality", 5);
    auto end = chrono::steady_clock::now();
    double elapsed_time = double(chrono::duration_cast<chrono::seconds>(end - start).count());
    cout << "Took " << elapsed_time << " seconds to finish!\n";
    return 0;
}


/*Menu prototype
 *  Doesn't require extra input-2.2,4.2
 *  Requires extra user given input-2.1,2.3,2.4,3.1,4.1
 *
 *  From the input ones,
 *  The ones that require a number-2.3
 *  The ones that require 1 station-2.4
 *  The ones that require 2 stations-2.1,3.1,4.1
 * */

/*
 *  1.1-Menu
 *
 *  1.3-Doxygen
 *
 *  2.1-Calculate the maximum number of trains that can simultaneously travel between
    two specific stations. -> Max Flow ig -> graph.edmondsKarp("Porto Campanhã", "Estarreja");
 *
 *  2.2-Determine, from all pairs of stations, which ones (if more than one) require the
    most amount of trains when taking full advantage of the existing network capacity;
 *
 *  2.3-Top-k municipalities and districts with higher budget;
 *
 *  2.4-Report the maximum number of trains that can simultaneously arrive at a given station,
    taking into consideration the entire railway grid.
 *
 *  3.1-Calculate the maximum amount of trains that can simultaneously travel between
    two specific stations with minimum cost for the company. Note that your system should also take any
    valid source and destination stations as input;
 *
 *  4.1-Calculate the maximum number of trains that can simultaneously travel between
    two specific stations in a network of reduced connectivity. Reduced connectivity is understood as being
    a subgraph (generated by your system) of the original railway network. Note that your system should
    also take any valid source and destination stations as input;
 *
 *  4.2-Provide a report on the stations that are the most affected by each segment failure,
    i.e., the top-k most affected stations for each segment to be considered.
 *
 *  5.1-Use the (hopefully) user-friendly interface you have developed to illustrate the
    various algorithm results for a sample set of railway grids which you should develop specifically for the
    purposes of this demo. For instance, you can develop a small set of very modest railway networks for
    contrived capacities so that you can highlight the “correctness” of your solution. For instance, a grid
    that has a “constricted” segment where all traffic must go through, will clearly have a segment very
    “sensitive” to failures.
 * */
